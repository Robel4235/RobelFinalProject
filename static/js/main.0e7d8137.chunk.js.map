{"version":3,"sources":["Components/WeatherProjet/ForecastCard.js","Components/WeatherProjet/FavouriteOperator.js","Components/WeatherProjet/WeatherPage.js","Components/WeatherProjet/ChoosenFavourite.js","Components/WeatherProjet/FavouritePage.js","App.js","reportWebVitals.js","index.js"],"names":["ForecastCard","props","className","date","condition","tempmax","tempmin","FavouriteOperator","useState","refresh","setRefresh","finder","i","favouriteList","length","cityName","checkLiked","color","size","onClick","inxToDelete","tempFavourite","cityKey","temperature","push","splice","addToFavouriteList","WeatherPage","setCityName","cityInfo","setCityInfo","cityCondition","setCityCondition","forecastList","setforecastList","currentTemp","setCurrentTemp","key","getCity","city","a","query","fetch","response","json","data","console","log","getWeather","id","getForecasts","Temperature","Metric","Value","DailyForecasts","choosenCityName","choosenCityKey","Object","entries","checkDefault","type","placeholder","onChange","e","target","value","then","Key","catch","err","LocalizedName","WeatherText","setFavouriteList","liked","setLiked","map","element","Date","Day","IconPhrase","Maximum","Minimum","ChoosenFavourite","setChoosenCity","choosenName","choosenKey","FavouritePage","to","App","choosenCity","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7d8137.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ForecastCard(props){   \r\n  \r\n    return(\r\n        <div className='forecastcard'>\r\n            <h6>{props.date}</h6>\r\n            <h5>{props.condition}</h5>\r\n            <h5>Maximum:{props.tempmax}°F</h5>\r\n            <h5>Minimum:{props.tempmin}°F</h5>    \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport {AiFillHeart,AiOutlineHeart} from 'react-icons/ai';\r\n\r\nexport default function FavouriteOperator(props){   \r\n const [refresh,setRefresh]=useState(false)\r\n const likeCheker =false;\r\n  const addToFavouriteList=()=>{\r\n    debugger;\r\n        let finder =false ;\r\n        let inxToDelete=0;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                inxToDelete=i;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n            let tempFavourite ={cityKey:props.cityKey, cityName:props.cityName,temperature:props.temperature,condition:props.condition}\r\n            props.favouriteList.push(tempFavourite);  \r\n            setRefresh(!refresh)    \r\n        }else{\r\n            props.favouriteList.splice(inxToDelete,1);   \r\n            setRefresh(!refresh)         \r\n        }\r\n    }\r\n\r\n    const checkLiked=()=>{\r\n        let finder =false ;\r\n        for (let i=0; i<props.favouriteList.length;i++){\r\n            if (props.favouriteList[i].cityName==props.cityName){\r\n                finder=true;\r\n                break\r\n            }\r\n        }\r\n        if(finder==false){\r\n           return false;   \r\n        }else{\r\n            return true;       \r\n        }\r\n    }\r\n    return(\r\n        <div >  \r\n            {checkLiked()==true? <AiFillHeart color='red' className='heartIcon' size='1cm'/>:<AiOutlineHeart className='heartIcon' size='1cm'/> }        \r\n                 <button className='addtofavobutton' onClick={()=>{addToFavouriteList()}}>Add to Favourite</button>  \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport forecastCard from './ForecastCard';\r\nimport ForecastCard from './ForecastCard';\r\nimport FavouriteOperator from './FavouriteOperator';\r\nimport {AiFillHeart,AiOutlineHeart} from 'react-icons/ai';\r\n\r\nexport default function WeatherPage(props){   \r\n  const [cityName,setCityName]=useState('')\r\n  const [cityInfo,setCityInfo]=useState({})\r\n  const [cityCondition,setCityCondition]=useState({})\r\n  const [forecastList,setforecastList]=useState([])\r\n  const [currentTemp,setCurrentTemp]=useState(0)\r\n  const key ='KOXg8wUAkNZ83XNGQdmrLNp8ZDGKP9ie'\r\n  const tempDefault=null;\r\n  //get city information\r\n const getCity =async(city)=>{\r\n    const base ='http://dataservice.accuweather.com/locations/v1/cities/autocomplete';\r\n    const query=`?apikey=${key}&q=${city}`;\r\n    const response =await fetch(base+query);\r\n    const data= await response.json();\r\n    setCityInfo(data[0]);\r\n    console.log(data)\r\n    return (data[0]);\r\n } \r\n //get weather information\r\n const getWeather =async(id)=>{\r\n    const base ='http://dataservice.accuweather.com/currentconditions/v1/';\r\n    const query=`${id}?apikey=${key}`;\r\n    const response =await fetch(base+query);\r\n    const data= await response.json();\r\n    getForecasts(id)\r\n    setCityCondition(data[0]);\r\n    setCurrentTemp(data[0].Temperature.Metric.Value);\r\n    console.log(data)\r\n    return data[0];\r\n } \r\n //get 5 Days of Daily Forecasts\r\n const getForecasts =async(id)=>{\r\n    const base ='http://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    const query=`${id}?apikey=${key}`;\r\n    const response =await fetch(base+query);\r\n    const data= await response.json();\r\n    setforecastList(data.DailyForecasts);\r\n    console.log(data)\r\n } \r\n \r\nconst checkDefault =()=>{\r\n   debugger;\r\n  \r\n   if (cityName=='' && props.choosenCityName==''&& props.choosenCityKey=='' && forecastList.length==0 &&\r\n    Object.entries(cityInfo).length=== 0&& Object.entries(cityCondition).length=== 0){  \r\n      getCity('tel aviv')\r\n      getWeather('215854')\r\n   }else{\r\n      if(props.choosenCityName!=''&&props.choosenCityKey!=''){\r\n         getCity(props.choosenCityName)\r\n         getWeather(props.choosenCityKey)\r\n      }else{\r\n         return null;\r\n\r\n      }\r\n     \r\n   }\r\n}\r\n\r\n    return(\r\n        <div>\r\n            <div> \r\n                   {checkDefault()}   \r\n\r\n                <input type=\"text\" placeholder='Enter the city here..' onChange={e=>setCityName(e.target.value)} /> \r\n                 <button onClick={()=>{getCity(cityName).then(data=>{\r\n                  getWeather(data.Key)}).then(data=>{console.log(data)})      \r\n                 .catch(err=>console.log(err))}}>Search</button>  <br /> <br />\r\n                 <div className='mainbox'>\r\n                    <div>\r\n                      <FavouriteOperator cityKey={cityInfo.Key} cityName={cityInfo.LocalizedName} \r\n                        temperature={currentTemp} condition={cityCondition.WeatherText}  \r\n                        favouriteList={props.favouriteList} setFavouriteList={props.setFavouriteList}\r\n                        liked={props.liked} setLiked={props.setLiked}/>\r\n                    </div>\r\n                        <h3 className='leftToTheBox'>{cityInfo.LocalizedName}</h3>\r\n                        <h3 className='leftToTheBox'>{currentTemp} °C</h3>\r\n                        <h4>{cityCondition.WeatherText}</h4> <br /> <br />\r\n                    <div> \r\n                      {forecastList.map((element)=>(\r\n                         <td>\r\n                             {<ForecastCard date={element.Date} condition={element.Day.IconPhrase}\r\n                              tempmax={element.Temperature.Maximum.Value} tempmin={element.Temperature.Minimum.Value}/>}\r\n                         </td>                      \r\n                      ))}\r\n                   </div>\r\n                 </div>\r\n                 \r\n            </div>       \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\n\r\nexport default function ChoosenFavourite(props){   \r\n  \r\n    return(\r\n        <div>   \r\n                <button className='forecastcard' onClick={()=>{props.setChoosenCity({choosenName:props.cityName,choosenKey:props.cityKey})}}>\r\n                    <h6>{props.cityName}</h6>\r\n                    <h5>{props.temperature}°C</h5>\r\n                    <h5>{props.condition} </h5>\r\n                </button>   \r\n        </div>\r\n    )\r\n}","import React, { useState,useEffect } from 'react';\r\nimport {Link} from 'react-router-dom'; \r\nimport './WeatherPage.css'\r\nimport ChoosenFavourite from './ChoosenFavourite'\r\n\r\nexport default function FavouritePage(props){   \r\n  \r\n    return(\r\n        <div >\r\n            {props.favouriteList.map((element)=>(     \r\n                <td>\r\n                    <Link to='/'>\r\n                    <ChoosenFavourite setChoosenCity={props.setChoosenCity} cityName={element.cityName} \r\n                    temperature={element.temperature} condition={element.condition} cityKey={element.cityKey}/>  \r\n                    </Link>\r\n                </td> \r\n                           \r\n            ))}\r\n              \r\n        </div>\r\n    )\r\n}","import './App.css';\nimport React, { useState,useEffect } from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport WeatherPage from './Components/WeatherProjet/WeatherPage';\nimport FavouritePage from './Components/WeatherProjet/FavouritePage'\n\n\nfunction App() {\n  const [favouriteList,setFavouriteList]=useState([])\n  const [choosenCity,setChoosenCity]=useState({choosenName:'',choosenKey:''})\n  return (\n    <div className=\"App\">        \n        <Router>    \n          <br />\n         <Link to='/'><button>Home</button></Link>  <Link to='/favouritepage'><button>Favourite</button> </Link>\n_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n     \n          <Switch>\n             <Route exact path='/' component={() => (<WeatherPage choosenCityKey={choosenCity.choosenKey}  choosenCityName={choosenCity.choosenName} favouriteList={favouriteList} /> )} /> \n             <Route exact path='/favouritepage' component={() => (<FavouritePage setChoosenCity={setChoosenCity} favouriteList={favouriteList} /> )} />   \n          </Switch>\n        </Router>\n      \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n{/*import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();*/}"],"sourceRoot":""}